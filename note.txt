// mac terminal

curl -X POST http://your-server-ip:5000/ask -H "Content-Type: application/json" -d '{"content": "In a small town, there lived a reclusive artist named Lila. She painted vivid dreams but never shared them. One day, a young boy named Tom stumbled upon her studio. ","model": "llama2","stream": false}'

curl -X POST http://34.81.201.69:5000/ask -H "Content-Type: application/json" -d '{"content": "In a small town, there lived a reclusive artist named Lila. She painted vivid dreams but never shared them. One day, a young boy named Tom stumbled upon her studio. ","model": "TAIDEQ2k","stream": false}'

// mac terminal test
curl http://localhost:11434/api/generate -d '{
  "model": "TAIDEQ2K",
  "prompt": "跟我講一個笑話",
  "stream": false
}'


//Taide
https://huggingface.co/taide/Llama3-TAIDE-LX-8B-Chat-Alpha1?fbclid=IwZXh0bgNhZW0CMTEAAR01GMZks9kwtSZo5mD5vmfwoMfZLXF_f7hSafcOG_OrlBqJP-w55IRIarE_aem_Ae_z9-YkWCvejrZZR_MTsuw_e9E6FQJeV6ar6wGSz0nThP8cEtVTtDGlPsBi27Gh7XnRNoGgXO7wG7asnMdQc0xZ

// exe python script on Github
curl -s https://raw.githubusercontent.com/Wu-yu-shiun/temp/main/apiserver_q1.py | python3


//linx kernal
sudo apt update
(sudo apt-get install build-dep linux libncurses-dev gawk flex bison openssl libssl-dev dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf llvm)

scripts/config --disable SYSTEM_TRUSTED_KEYS

//1125 temp
static ssize_t kfetch_read(struct file *file, char __user *user_buf, size_t len, loff_t *offset) {
    int buf_len = 0;
    struct sysinfo si;
    struct task_struct *task;
    int proc_count = 0;
    int line = 0
    char linux_logo[7][20] = {
        "         .-.        ",
        "        (.. |       ",
        "        \033[33m<>\033[0m  |       ",
        "       / --- \\      ",
        "      ( |   | )     ",
        "    \033[33m|\\\033[0m_)__(_/\033[33m/|\033[0m    ",
        "   \033[33m<__)\033[0m------\033[33m(__>\033[0m   "
    };

    if (*offset != 0)
        return 0;

    mutex_lock(&kfetch_mutex);

    buf_len += scnprintf(kfetch_buf + buf_len, KFETCH_BUF_SIZE - buf_len,"                    ");
    buf_len += scnprintf(kfetch_buf + buf_len, KFETCH_BUF_SIZE - buf_len,"%s\n", utsname()->nodename);

    buf_len += scnprintf(kfetch_buf + buf_len, KFETCH_BUF_SIZE - buf_len,linux_logo[line++]);
    buf_len += scnprintf(kfetch_buf + buf_len, KFETCH_BUF_SIZE - buf_len,"----------------------------------------\n");

    buf_len += scnprintf(kfetch_buf + buf_len, KFETCH_BUF_SIZE - buf_len,linux_logo[line++]);
    if (info_mask & KFETCH_RELEASE) {
        buf_len += scnprintf(kfetch_buf + buf_len, KFETCH_BUF_SIZE - buf_len,"Kernel: %s\n", utsname()->release);
        buf_len += scnprintf(kfetch_buf + buf_len, KFETCH_BUF_SIZE - buf_len,linux_logo[line++]);
    }

    if (info_mask & KFETCH_CPU_MODEL) {
        buf_len += scnprintf(kfetch_buf + buf_len, KFETCH_BUF_SIZE - buf_len,"CPU: QEMU Virtual CPU (example)\n");
        buf_len += scnprintf(kfetch_buf + buf_len, KFETCH_BUF_SIZE - buf_len,linux_logo[line++]);
    }

    if (info_mask & KFETCH_NUM_CPUS) {
        buf_len += scnprintf(kfetch_buf + buf_len, KFETCH_BUF_SIZE - buf_len,"CPUs: %d / %d\n", num_online_cpus(), num_possible_cpus());
        buf_len += scnprintf(kfetch_buf + buf_len, KFETCH_BUF_SIZE - buf_len,linux_logo[line++]);
    }

    if (info_mask & KFETCH_MEM) {
        si_meminfo(&si);
        buf_len += scnprintf(kfetch_buf + buf_len, KFETCH_BUF_SIZE - buf_len,"Mem: %lu MB / %lu MB\n",si.freeram >> 10, si.totalram >> 10);
        buf_len += scnprintf(kfetch_buf + buf_len, KFETCH_BUF_SIZE - buf_len,linux_logo[line++]);
    }

    if (info_mask & KFETCH_NUM_PROCS) {
        for_each_process(task)
            proc_count++;
        buf_len += scnprintf(kfetch_buf + buf_len, KFETCH_BUF_SIZE - buf_len,"Procs: %d\n", proc_count);
        buf_len += scnprintf(kfetch_buf + buf_len, KFETCH_BUF_SIZE - buf_len,linux_logo[line++]);
    }

    if (info_mask & KFETCH_UPTIME) {
        buf_len += scnprintf(kfetch_buf + buf_len, KFETCH_BUF_SIZE - buf_len,"Uptime: %lu mins\n", (unsigned long) jiffies_to_msecs(get_jiffies_64()) / 60000);
        buf_len += scnprintf(kfetch_buf + buf_len, KFETCH_BUF_SIZE - buf_len,linux_logo[line++]);
    }

    while(line<=7){
        buf_len += scnprintf(kfetch_buf + buf_len, KFETCH_BUF_SIZE - buf_len,linux_logo[line++]);
    }

    mutex_unlock(&kfetch_mutex);

    if (copy_to_user(user_buf, kfetch_buf, buf_len))
        return -EFAULT;

    *offset = buf_len;
    return buf_len;
}
